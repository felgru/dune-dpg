Description
===========

This folder contains the sources of the dune-dpg library, which allows to
solve Partial Differential Equations with Discontinuous Petrov-Galerkin
finite elements. It is built upon the finite element package Dune. The
scientific interest of the code can be found in the paper "The dune-dpg
library for solving PDEs with Discontinuous Petrov-Galerkin finite elements"
by F. Gruber, A. Klewinghaus and O. Mula.

This README document explains how to install this library and run basic examples which are described in the paper.

Preparing the Sources
=====================

Additional to the Dune libraries, you'll need the following programs and
libraries installed on your system:

  - Programs:
    - a C++11-compatible compiler (e.g. GCC >= 4.9)
    - cmake >= 2.8.6
  - Libraries:
    - Boost Fusion >= 1.59
    - A grid manager. Our examples use UG 3.12.1
      (http://www.iwr.uni-heidelberg.de/frame/iwrwikiequipment/software/ug)
      but one could also use other managers, e.g., ALBERTA or YASPgrid.
    - UMFPACK (which is part of Suitesparse, www.suitesparse.com)

You need the DUNE core libraries in version 2.4.1. Additionally you need
dune-typetree 2.4 and dune-functions in the version of branch
releases/2.4-compatible from the Git repositories
https://gitlab.dune-project.org/pdelab/dune-typetree.git
https://gitlab.dune-project.org/staging/dune-functions.git

Installation of 3rd party libraries and programs
================================================

On Debian GNU/Linux
-------------------

All necessary libraries are included in Debian Stretch and most are included
in jessie-backports. They can be installed via

    apt install git cmake libboost-dev libug-dev libsuitesparse-dev
    apt install libdune-common-dev libdune-geometry-dev libdune-grid-dev \
                libdune-istl-dev libdune-localfunctions-dev \
                libdune-functions-dev libdune-typetree-dev

Using Homebrew on MacOS
-----------------------

cmake installation (it requires the previous installation of autoconf, automake and libtool):
    brew install autoconf
    brew install automake
    brew install libtool
    brew install cmake

The installation of pkg-config is recommended:
    brew install pkg-config

boost installation:
    brew install --c++11 boost

umfpack installation:
    brew tap /hombrew/science/
    brew install /hombrew/science/suite-sparse

Installation of UG
------------------

Download release 3.12.1 of UG from

    http://conan.iwr.uni-heidelberg.de/download/ug-3.12.1.tar.gz

and unpack it.

Remark: The latest release 3.13.0 is incompatible with Dune 2.4.1.
        (see https://gitlab.dune-project.org/core/dune-grid/issues/13)

In the UG folder, run

    autoreconf -is
    ./configure --enable-dune --without-x CXX=g++
    make
    make install

Installation and compilation of dune and dune-dpg
=================================================

We give detailed installation guidelines using GCC and the UG grid manager.
The URLs that are given below were still active on July 2016. We apologize
for possible future inconsistencies in the links and hope that the user
will nevertheless find his way.

1) Create a folder devoted to Dune. We will call it $DUNEDIR.

Installation of dune on (Debian?) GNU/Linux
-------------------------------------------
2) In $DUNEDIR, run:

    apt install libdune-common-dev libdune-geometry-dev libdune-grid-dev \
                libdune-istl-dev libdune-localfunctions-dev \
                libdune-functions-dev libdune-typetree-dev

Installation of dune on MacOS
-----------------------------

2) Download the following dune sources in $DUNEDIR:
 2.a) - Version >= 2.4.1 of the following Dune source modules:
        dune-common, dune-geometry, dune-grid, dune-istl, dune-localfunctions
      - Link: https://dune-project.org/releases/2.4.1/

 2.b) Download dune-functions and dune-typetree by cloning the 2.4 release
      branches of their GitLab repositories

        git clone -b releases/2.4-compatible \
                  https://gitlab.dune-project.org/staging/dune-functions
        git clone -b releases/2.4 \
                  https://gitlab.dune-project.org/pdelab/dune-typetree

      Remark: In the future, these modules might be associated with more
              stable releases and found in https://dune-project.org/releases/

Installation of dune-dpg
------------------------
3) Download dune-dpg in $DUNEDIR:
  git clone ..... TODO ......

Remark: Future updates of the code will be pushed into this repository.

Building and compiling dune and dune-dpg
----------------------------------------

4) Create a file dune.opts in $DUNEDIR and specify
the C and C++ compiler in it. In our case, we have used gcc and g++ so
the file reads

CMAKE_FLAGS="-DCMAKE_C_COMPILER='gcc' -DCMAKE_CXX_COMPILER='g++'"

Remarks:
 - In MacOS, the C compiler is set to clang by default so the previous
   configuration option cannot be omitted.
 - The use of clang and clang++ is in principle also possible here although
   this compiler has not been tested.

5) In $DUNEDIR, run

     $DUNEDIR/dune-common/bin/dunecontrol --opts=$DUNEDIR/dune.opts all

The command dunecontrol creates makefiles and compiles the sources. It
creates a directory build_cmake inside each Dune module where the
executables are built. As a consequence, the user should cd into
$DUNEDIR/dune-dpg/build_cmake to run the examples of the paper.

For more information and options on this command, run

    $DUNEDIR/dune-common/bin/dunecontrol --help .

More information on the build system of Dune can be found under
https://dune-project.org/doc/installation/
https://dune-project.org/buildsystem/

Running dune-dpg
================

Dune-dpg comes with two example programs:

$DUNEDIR/dune-dpg/src/plot_solution.cc
$DUNEDIR/dune-dpg/src/convergence_test.cc

To run them, go to $DUNEDIR/dune-dpg/build-cmake/src/ and then run
the corresponding executables.

To regenerate the convergence plots from the paper, it is advised to compile
the test programs in release mode, to significantly speed up the computations.
The release mode can be configured with

    cmake -DCMAKE_BUILD_TYPE=Release .

Afterwards, we can compile the test programs with

    make

To run the test programs with the right parameters, call

    ../scripts/run_convergence_test.sh

This will take several hours. (you can first adapt this script if you
want to change the grid resolution n=1/H, especially the test case with
locally refined test search space of level 3 gets very slow for large n)

Finally, the convergence plots can be generated with

    ../scripts/convergence_plots.py

To plot the solution itself in the .vtu format readable by ParaView, run

    src/plot_solution <n>

where <n> is to be replaced by the desired grid resolution. This will write
two .vtu files to the current working directory representing the numerical
solution of the interior and trace variables.
If you have the pvpython interpreter shipped with ParaView, you can also run
the scripts/plot_solution.py to regenerate the solution plot given in the paper.
(This script was run with ParaView 4.2.0. As the Python interface of ParaView
seems to be highly unstable, we cannot guarantee, that the script will run
unmodified on another version of ParaView.)

License
=======

Licensing information for dune-dpg can be found in the accompanying file
COPYING.
